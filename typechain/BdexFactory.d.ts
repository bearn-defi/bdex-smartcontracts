/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BdexFactoryInterface extends ethers.utils.Interface {
  functions: {
    "allPairs(uint256)": FunctionFragment;
    "allPairsLength()": FunctionFragment;
    "createPair(address,address,uint32,uint32)": FunctionFragment;
    "feeTo()": FunctionFragment;
    "feeToSetter()": FunctionFragment;
    "formula()": FunctionFragment;
    "getPair(address,address,uint32,uint32)": FunctionFragment;
    "getWeightsAndSwapFee(address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "isPair(address)": FunctionFragment;
    "protocolFee()": FunctionFragment;
    "setFeeTo(address)": FunctionFragment;
    "setFeeToSetter(address)": FunctionFragment;
    "setProtocolFee(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allPairs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allPairsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createPair",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "feeTo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeToSetter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "formula", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPair",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWeightsAndSwapFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "isPair", values: [string]): string;
  encodeFunctionData(
    functionFragment: "protocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setFeeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setFeeToSetter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFee",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "allPairs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allPairsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeToSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "formula", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWeightsAndSwapFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeToSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFee",
    data: BytesLike
  ): Result;

  events: {
    "PairCreated(address,address,address,uint32,uint32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PairCreated"): EventFragment;
}

export class BdexFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BdexFactoryInterface;

  functions: {
    allPairs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "allPairs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    allPairsLength(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "allPairsLength()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    createPair(
      tokenA: string,
      tokenB: string,
      tokenWeightA: BigNumberish,
      swapFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createPair(address,address,uint32,uint32)"(
      tokenA: string,
      tokenB: string,
      tokenWeightA: BigNumberish,
      swapFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    feeTo(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "feeTo()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    feeToSetter(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "feeToSetter()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    formula(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "formula()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getPair(
      tokenA: string,
      tokenB: string,
      tokenWeightA: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      pair: string;
      0: string;
    }>;

    "getPair(address,address,uint32,uint32)"(
      tokenA: string,
      tokenB: string,
      tokenWeightA: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      pair: string;
      0: string;
    }>;

    getWeightsAndSwapFee(
      pair: string,
      overrides?: CallOverrides
    ): Promise<{
      tokenWeight0: number;
      tokenWeight1: number;
      swapFee: number;
      0: number;
      1: number;
      2: number;
    }>;

    "getWeightsAndSwapFee(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<{
      tokenWeight0: number;
      tokenWeight1: number;
      swapFee: number;
      0: number;
      1: number;
      2: number;
    }>;

    initialize(
      _feeToSetter: string,
      _formula: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address)"(
      _feeToSetter: string,
      _formula: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isPair(
      b: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isPair(address)"(
      b: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    protocolFee(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "protocolFee()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFeeTo(address)"(
      _feeTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFeeToSetter(
      _feeToSetter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFeeToSetter(address)"(
      _feeToSetter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setProtocolFee(
      _protocolFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setProtocolFee(uint256)"(
      _protocolFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  allPairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "allPairs(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

  "allPairsLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  createPair(
    tokenA: string,
    tokenB: string,
    tokenWeightA: BigNumberish,
    swapFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createPair(address,address,uint32,uint32)"(
    tokenA: string,
    tokenB: string,
    tokenWeightA: BigNumberish,
    swapFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  feeTo(overrides?: CallOverrides): Promise<string>;

  "feeTo()"(overrides?: CallOverrides): Promise<string>;

  feeToSetter(overrides?: CallOverrides): Promise<string>;

  "feeToSetter()"(overrides?: CallOverrides): Promise<string>;

  formula(overrides?: CallOverrides): Promise<string>;

  "formula()"(overrides?: CallOverrides): Promise<string>;

  getPair(
    tokenA: string,
    tokenB: string,
    tokenWeightA: BigNumberish,
    swapFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getPair(address,address,uint32,uint32)"(
    tokenA: string,
    tokenB: string,
    tokenWeightA: BigNumberish,
    swapFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getWeightsAndSwapFee(
    pair: string,
    overrides?: CallOverrides
  ): Promise<{
    tokenWeight0: number;
    tokenWeight1: number;
    swapFee: number;
    0: number;
    1: number;
    2: number;
  }>;

  "getWeightsAndSwapFee(address)"(
    pair: string,
    overrides?: CallOverrides
  ): Promise<{
    tokenWeight0: number;
    tokenWeight1: number;
    swapFee: number;
    0: number;
    1: number;
    2: number;
  }>;

  initialize(
    _feeToSetter: string,
    _formula: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address)"(
    _feeToSetter: string,
    _formula: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isPair(b: string, overrides?: CallOverrides): Promise<boolean>;

  "isPair(address)"(b: string, overrides?: CallOverrides): Promise<boolean>;

  protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

  "protocolFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  setFeeTo(_feeTo: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setFeeTo(address)"(
    _feeTo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFeeToSetter(
    _feeToSetter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFeeToSetter(address)"(
    _feeToSetter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setProtocolFee(
    _protocolFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setProtocolFee(uint256)"(
    _protocolFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    allPairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "allPairs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

    "allPairsLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    createPair(
      tokenA: string,
      tokenB: string,
      tokenWeightA: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "createPair(address,address,uint32,uint32)"(
      tokenA: string,
      tokenB: string,
      tokenWeightA: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    feeTo(overrides?: CallOverrides): Promise<string>;

    "feeTo()"(overrides?: CallOverrides): Promise<string>;

    feeToSetter(overrides?: CallOverrides): Promise<string>;

    "feeToSetter()"(overrides?: CallOverrides): Promise<string>;

    formula(overrides?: CallOverrides): Promise<string>;

    "formula()"(overrides?: CallOverrides): Promise<string>;

    getPair(
      tokenA: string,
      tokenB: string,
      tokenWeightA: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getPair(address,address,uint32,uint32)"(
      tokenA: string,
      tokenB: string,
      tokenWeightA: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getWeightsAndSwapFee(
      pair: string,
      overrides?: CallOverrides
    ): Promise<{
      tokenWeight0: number;
      tokenWeight1: number;
      swapFee: number;
      0: number;
      1: number;
      2: number;
    }>;

    "getWeightsAndSwapFee(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<{
      tokenWeight0: number;
      tokenWeight1: number;
      swapFee: number;
      0: number;
      1: number;
      2: number;
    }>;

    initialize(
      _feeToSetter: string,
      _formula: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address)"(
      _feeToSetter: string,
      _formula: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isPair(b: string, overrides?: CallOverrides): Promise<boolean>;

    "isPair(address)"(b: string, overrides?: CallOverrides): Promise<boolean>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    setFeeTo(_feeTo: string, overrides?: CallOverrides): Promise<void>;

    "setFeeTo(address)"(
      _feeTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeToSetter(
      _feeToSetter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFeeToSetter(address)"(
      _feeToSetter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFee(
      _protocolFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setProtocolFee(uint256)"(
      _protocolFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    PairCreated(
      token0: string | null,
      token1: string | null,
      pair: null,
      tokenWeight0: null,
      swapFee: null,
      undefined: null
    ): EventFilter;
  };

  estimateGas: {
    allPairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "allPairs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

    "allPairsLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    createPair(
      tokenA: string,
      tokenB: string,
      tokenWeightA: BigNumberish,
      swapFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createPair(address,address,uint32,uint32)"(
      tokenA: string,
      tokenB: string,
      tokenWeightA: BigNumberish,
      swapFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    feeTo(overrides?: CallOverrides): Promise<BigNumber>;

    "feeTo()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeToSetter(overrides?: CallOverrides): Promise<BigNumber>;

    "feeToSetter()"(overrides?: CallOverrides): Promise<BigNumber>;

    formula(overrides?: CallOverrides): Promise<BigNumber>;

    "formula()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPair(
      tokenA: string,
      tokenB: string,
      tokenWeightA: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPair(address,address,uint32,uint32)"(
      tokenA: string,
      tokenB: string,
      tokenWeightA: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWeightsAndSwapFee(
      pair: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWeightsAndSwapFee(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _feeToSetter: string,
      _formula: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address)"(
      _feeToSetter: string,
      _formula: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isPair(b: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isPair(address)"(b: string, overrides?: CallOverrides): Promise<BigNumber>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    setFeeTo(_feeTo: string, overrides?: Overrides): Promise<BigNumber>;

    "setFeeTo(address)"(
      _feeTo: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFeeToSetter(
      _feeToSetter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFeeToSetter(address)"(
      _feeToSetter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setProtocolFee(
      _protocolFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setProtocolFee(uint256)"(
      _protocolFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allPairs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allPairs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allPairsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "allPairsLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createPair(
      tokenA: string,
      tokenB: string,
      tokenWeightA: BigNumberish,
      swapFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createPair(address,address,uint32,uint32)"(
      tokenA: string,
      tokenB: string,
      tokenWeightA: BigNumberish,
      swapFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    feeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeTo()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeToSetter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeToSetter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    formula(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "formula()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPair(
      tokenA: string,
      tokenB: string,
      tokenWeightA: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPair(address,address,uint32,uint32)"(
      tokenA: string,
      tokenB: string,
      tokenWeightA: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWeightsAndSwapFee(
      pair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getWeightsAndSwapFee(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _feeToSetter: string,
      _formula: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address)"(
      _feeToSetter: string,
      _formula: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isPair(b: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isPair(address)"(
      b: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "protocolFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFeeTo(address)"(
      _feeTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFeeToSetter(
      _feeToSetter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFeeToSetter(address)"(
      _feeToSetter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setProtocolFee(
      _protocolFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setProtocolFee(uint256)"(
      _protocolFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
