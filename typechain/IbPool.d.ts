/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IbPoolInterface extends ethers.utils.Interface {
  functions: {
    "addRewardPool(address,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "bind(address,uint256,uint256)": FunctionFragment;
    "calcInGivenOut(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcOutGivenIn(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "exitPool(uint256,uint256[])": FunctionFragment;
    "exitswapExternAmountOut(address,uint256,uint256)": FunctionFragment;
    "exitswapPoolAmountIn(address,uint256,uint256)": FunctionFragment;
    "finalize(uint256,uint256,address[],uint256[])": FunctionFragment;
    "finalizeRewardFundInfo(address,uint256)": FunctionFragment;
    "getBalance(address)": FunctionFragment;
    "getDenormalizedWeight(address)": FunctionFragment;
    "getFinalTokens()": FunctionFragment;
    "getSpotPrice(address,address)": FunctionFragment;
    "getTotalDenormalizedWeight()": FunctionFragment;
    "isBound(address)": FunctionFragment;
    "joinPool(uint256,uint256[])": FunctionFragment;
    "joinPoolFor(address,uint256,uint256[])": FunctionFragment;
    "joinswapExternAmountIn(address,uint256,uint256)": FunctionFragment;
    "joinswapPoolAmountOut(address,uint256,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "rebind(address,uint256,uint256)": FunctionFragment;
    "setController(address)": FunctionFragment;
    "setExchangeProxy(address)": FunctionFragment;
    "setPublicSwap(bool)": FunctionFragment;
    "setSwapFee(uint256)": FunctionFragment;
    "swapExactAmountIn(address,uint256,address,uint256,uint256)": FunctionFragment;
    "swapExactAmountOut(address,uint256,address,uint256,uint256)": FunctionFragment;
    "swapFee()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "version()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addRewardPool",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "bind",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcInGivenOut",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcOutGivenIn",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "exitPool",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "exitswapExternAmountOut",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exitswapPoolAmountIn",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalize",
    values: [BigNumberish, BigNumberish, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeRewardFundInfo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getBalance", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getDenormalizedWeight",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFinalTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSpotPrice",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDenormalizedWeight",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isBound", values: [string]): string;
  encodeFunctionData(
    functionFragment: "joinPool",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "joinPoolFor",
    values: [string, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "joinswapExternAmountIn",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinswapPoolAmountOut",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rebind",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setExchangeProxy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicSwap",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactAmountIn",
    values: [string, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactAmountOut",
    values: [string, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "swapFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addRewardPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bind", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcInGivenOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcOutGivenIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exitPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exitswapExternAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitswapPoolAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeRewardFundInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDenormalizedWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFinalTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpotPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDenormalizedWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isBound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "joinPoolFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinswapExternAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinswapPoolAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebind", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExchangeProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublicSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSwapFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapExactAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class IbPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IbPoolInterface;

  functions: {
    addRewardPool(
      _rewardToken: string,
      _startBlock: BigNumberish,
      _endRewardBlock: BigNumberish,
      _rewardPerBlock: BigNumberish,
      _lockRewardPercent: BigNumberish,
      _startVestingBlock: BigNumberish,
      _endVestingBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addRewardPool(address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      _rewardToken: string,
      _startBlock: BigNumberish,
      _endRewardBlock: BigNumberish,
      _rewardPerBlock: BigNumberish,
      _lockRewardPercent: BigNumberish,
      _startVestingBlock: BigNumberish,
      _endVestingBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    bind(
      token: string,
      balance: BigNumberish,
      denorm: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "bind(address,uint256,uint256)"(
      token: string,
      balance: BigNumberish,
      denorm: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    calcInGivenOut(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "calcInGivenOut(uint256,uint256,uint256,uint256,uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    calcOutGivenIn(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "calcOutGivenIn(uint256,uint256,uint256,uint256,uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    decimals(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "decimals()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    exitPool(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exitPool(uint256,uint256[])"(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    exitswapExternAmountOut(
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      maxPoolAmountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exitswapExternAmountOut(address,uint256,uint256)"(
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      maxPoolAmountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    exitswapPoolAmountIn(
      tokenOut: string,
      poolAmountIn: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exitswapPoolAmountIn(address,uint256,uint256)"(
      tokenOut: string,
      poolAmountIn: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    finalize(
      _swapFee: BigNumberish,
      _initPoolSupply: BigNumberish,
      _bindTokens: string[],
      _bindDenorms: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "finalize(uint256,uint256,address[],uint256[])"(
      _swapFee: BigNumberish,
      _initPoolSupply: BigNumberish,
      _bindTokens: string[],
      _bindDenorms: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    finalizeRewardFundInfo(
      _rewardFund: string,
      _unstakingFrozenTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "finalizeRewardFundInfo(address,uint256)"(
      _rewardFund: string,
      _unstakingFrozenTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getBalance(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getDenormalizedWeight(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getDenormalizedWeight(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getFinalTokens(overrides?: CallOverrides): Promise<{
      tokens: string[];
      0: string[];
    }>;

    "getFinalTokens()"(overrides?: CallOverrides): Promise<{
      tokens: string[];
      0: string[];
    }>;

    getSpotPrice(
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<{
      spotPrice: BigNumber;
      0: BigNumber;
    }>;

    "getSpotPrice(address,address)"(
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<{
      spotPrice: BigNumber;
      0: BigNumber;
    }>;

    getTotalDenormalizedWeight(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getTotalDenormalizedWeight()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    isBound(
      t: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isBound(address)"(
      t: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    joinPool(
      poolAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "joinPool(uint256,uint256[])"(
      poolAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    joinPoolFor(
      account: string,
      rewardAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "joinPoolFor(address,uint256,uint256[])"(
      account: string,
      rewardAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    joinswapExternAmountIn(
      tokenIn: string,
      tokenAmountIn: BigNumberish,
      minPoolAmountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "joinswapExternAmountIn(address,uint256,uint256)"(
      tokenIn: string,
      tokenAmountIn: BigNumberish,
      minPoolAmountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    joinswapPoolAmountOut(
      tokenIn: string,
      poolAmountOut: BigNumberish,
      maxAmountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "joinswapPoolAmountOut(address,uint256,uint256)"(
      tokenIn: string,
      poolAmountOut: BigNumberish,
      maxAmountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "name()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    rebind(
      token: string,
      balance: BigNumberish,
      denorm: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "rebind(address,uint256,uint256)"(
      token: string,
      balance: BigNumberish,
      denorm: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setController(
      _controller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setController(address)"(
      _controller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setExchangeProxy(
      _exchangeProxy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setExchangeProxy(address)"(
      _exchangeProxy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPublicSwap(
      _publicSwap: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPublicSwap(bool)"(
      _publicSwap: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSwapFee(
      _swapFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSwapFee(uint256)"(
      _swapFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapExactAmountIn(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapExactAmountIn(address,uint256,address,uint256,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapExactAmountOut(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapExactAmountOut(address,uint256,address,uint256,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapFee(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "swapFee()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    symbol(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "symbol()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    totalSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "version()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;
  };

  addRewardPool(
    _rewardToken: string,
    _startBlock: BigNumberish,
    _endRewardBlock: BigNumberish,
    _rewardPerBlock: BigNumberish,
    _lockRewardPercent: BigNumberish,
    _startVestingBlock: BigNumberish,
    _endVestingBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addRewardPool(address,uint256,uint256,uint256,uint256,uint256,uint256)"(
    _rewardToken: string,
    _startBlock: BigNumberish,
    _endRewardBlock: BigNumberish,
    _rewardPerBlock: BigNumberish,
    _lockRewardPercent: BigNumberish,
    _startVestingBlock: BigNumberish,
    _endVestingBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bind(
    token: string,
    balance: BigNumberish,
    denorm: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "bind(address,uint256,uint256)"(
    token: string,
    balance: BigNumberish,
    denorm: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  calcInGivenOut(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BigNumberish,
    arg5: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcInGivenOut(uint256,uint256,uint256,uint256,uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BigNumberish,
    arg5: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcOutGivenIn(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BigNumberish,
    arg5: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcOutGivenIn(uint256,uint256,uint256,uint256,uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BigNumberish,
    arg5: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  exitPool(
    poolAmountIn: BigNumberish,
    minAmountsOut: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exitPool(uint256,uint256[])"(
    poolAmountIn: BigNumberish,
    minAmountsOut: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  exitswapExternAmountOut(
    tokenOut: string,
    tokenAmountOut: BigNumberish,
    maxPoolAmountIn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exitswapExternAmountOut(address,uint256,uint256)"(
    tokenOut: string,
    tokenAmountOut: BigNumberish,
    maxPoolAmountIn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  exitswapPoolAmountIn(
    tokenOut: string,
    poolAmountIn: BigNumberish,
    minAmountOut: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exitswapPoolAmountIn(address,uint256,uint256)"(
    tokenOut: string,
    poolAmountIn: BigNumberish,
    minAmountOut: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  finalize(
    _swapFee: BigNumberish,
    _initPoolSupply: BigNumberish,
    _bindTokens: string[],
    _bindDenorms: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "finalize(uint256,uint256,address[],uint256[])"(
    _swapFee: BigNumberish,
    _initPoolSupply: BigNumberish,
    _bindTokens: string[],
    _bindDenorms: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  finalizeRewardFundInfo(
    _rewardFund: string,
    _unstakingFrozenTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "finalizeRewardFundInfo(address,uint256)"(
    _rewardFund: string,
    _unstakingFrozenTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getBalance(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDenormalizedWeight(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getDenormalizedWeight(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFinalTokens(overrides?: CallOverrides): Promise<string[]>;

  "getFinalTokens()"(overrides?: CallOverrides): Promise<string[]>;

  getSpotPrice(
    tokenIn: string,
    tokenOut: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getSpotPrice(address,address)"(
    tokenIn: string,
    tokenOut: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalDenormalizedWeight(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalDenormalizedWeight()"(overrides?: CallOverrides): Promise<BigNumber>;

  isBound(t: string, overrides?: CallOverrides): Promise<boolean>;

  "isBound(address)"(t: string, overrides?: CallOverrides): Promise<boolean>;

  joinPool(
    poolAmountOut: BigNumberish,
    maxAmountsIn: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "joinPool(uint256,uint256[])"(
    poolAmountOut: BigNumberish,
    maxAmountsIn: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  joinPoolFor(
    account: string,
    rewardAmountOut: BigNumberish,
    maxAmountsIn: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "joinPoolFor(address,uint256,uint256[])"(
    account: string,
    rewardAmountOut: BigNumberish,
    maxAmountsIn: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  joinswapExternAmountIn(
    tokenIn: string,
    tokenAmountIn: BigNumberish,
    minPoolAmountOut: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "joinswapExternAmountIn(address,uint256,uint256)"(
    tokenIn: string,
    tokenAmountIn: BigNumberish,
    minPoolAmountOut: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  joinswapPoolAmountOut(
    tokenIn: string,
    poolAmountOut: BigNumberish,
    maxAmountIn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "joinswapPoolAmountOut(address,uint256,uint256)"(
    tokenIn: string,
    poolAmountOut: BigNumberish,
    maxAmountIn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  rebind(
    token: string,
    balance: BigNumberish,
    denorm: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "rebind(address,uint256,uint256)"(
    token: string,
    balance: BigNumberish,
    denorm: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setController(
    _controller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setController(address)"(
    _controller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setExchangeProxy(
    _exchangeProxy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setExchangeProxy(address)"(
    _exchangeProxy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPublicSwap(
    _publicSwap: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPublicSwap(bool)"(
    _publicSwap: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSwapFee(
    _swapFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSwapFee(uint256)"(
    _swapFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapExactAmountIn(
    arg0: string,
    arg1: BigNumberish,
    arg2: string,
    arg3: BigNumberish,
    arg4: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapExactAmountIn(address,uint256,address,uint256,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    arg2: string,
    arg3: BigNumberish,
    arg4: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapExactAmountOut(
    arg0: string,
    arg1: BigNumberish,
    arg2: string,
    arg3: BigNumberish,
    arg4: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapExactAmountOut(address,uint256,address,uint256,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    arg2: string,
    arg3: BigNumberish,
    arg4: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapFee(overrides?: CallOverrides): Promise<BigNumber>;

  "swapFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    to: string,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  "version()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addRewardPool(
      _rewardToken: string,
      _startBlock: BigNumberish,
      _endRewardBlock: BigNumberish,
      _rewardPerBlock: BigNumberish,
      _lockRewardPercent: BigNumberish,
      _startVestingBlock: BigNumberish,
      _endVestingBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addRewardPool(address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      _rewardToken: string,
      _startBlock: BigNumberish,
      _endRewardBlock: BigNumberish,
      _rewardPerBlock: BigNumberish,
      _lockRewardPercent: BigNumberish,
      _startVestingBlock: BigNumberish,
      _endVestingBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bind(
      token: string,
      balance: BigNumberish,
      denorm: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "bind(address,uint256,uint256)"(
      token: string,
      balance: BigNumberish,
      denorm: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calcInGivenOut(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcInGivenOut(uint256,uint256,uint256,uint256,uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcOutGivenIn(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcOutGivenIn(uint256,uint256,uint256,uint256,uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    exitPool(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "exitPool(uint256,uint256[])"(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    exitswapExternAmountOut(
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      maxPoolAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exitswapExternAmountOut(address,uint256,uint256)"(
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      maxPoolAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exitswapPoolAmountIn(
      tokenOut: string,
      poolAmountIn: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exitswapPoolAmountIn(address,uint256,uint256)"(
      tokenOut: string,
      poolAmountIn: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalize(
      _swapFee: BigNumberish,
      _initPoolSupply: BigNumberish,
      _bindTokens: string[],
      _bindDenorms: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "finalize(uint256,uint256,address[],uint256[])"(
      _swapFee: BigNumberish,
      _initPoolSupply: BigNumberish,
      _bindTokens: string[],
      _bindDenorms: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeRewardFundInfo(
      _rewardFund: string,
      _unstakingFrozenTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "finalizeRewardFundInfo(address,uint256)"(
      _rewardFund: string,
      _unstakingFrozenTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getBalance(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDenormalizedWeight(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDenormalizedWeight(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFinalTokens(overrides?: CallOverrides): Promise<string[]>;

    "getFinalTokens()"(overrides?: CallOverrides): Promise<string[]>;

    getSpotPrice(
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSpotPrice(address,address)"(
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDenormalizedWeight(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalDenormalizedWeight()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBound(t: string, overrides?: CallOverrides): Promise<boolean>;

    "isBound(address)"(t: string, overrides?: CallOverrides): Promise<boolean>;

    joinPool(
      poolAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "joinPool(uint256,uint256[])"(
      poolAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    joinPoolFor(
      account: string,
      rewardAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "joinPoolFor(address,uint256,uint256[])"(
      account: string,
      rewardAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    joinswapExternAmountIn(
      tokenIn: string,
      tokenAmountIn: BigNumberish,
      minPoolAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "joinswapExternAmountIn(address,uint256,uint256)"(
      tokenIn: string,
      tokenAmountIn: BigNumberish,
      minPoolAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinswapPoolAmountOut(
      tokenIn: string,
      poolAmountOut: BigNumberish,
      maxAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "joinswapPoolAmountOut(address,uint256,uint256)"(
      tokenIn: string,
      poolAmountOut: BigNumberish,
      maxAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    rebind(
      token: string,
      balance: BigNumberish,
      denorm: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "rebind(address,uint256,uint256)"(
      token: string,
      balance: BigNumberish,
      denorm: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setController(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setController(address)"(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setExchangeProxy(
      _exchangeProxy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setExchangeProxy(address)"(
      _exchangeProxy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPublicSwap(
      _publicSwap: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPublicSwap(bool)"(
      _publicSwap: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapFee(
      _swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setSwapFee(uint256)"(
      _swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapExactAmountIn(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    "swapExactAmountIn(address,uint256,address,uint256,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    swapExactAmountOut(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    "swapExactAmountOut(address,uint256,address,uint256,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    swapFee(overrides?: CallOverrides): Promise<BigNumber>;

    "swapFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    "version()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;
  };

  estimateGas: {
    addRewardPool(
      _rewardToken: string,
      _startBlock: BigNumberish,
      _endRewardBlock: BigNumberish,
      _rewardPerBlock: BigNumberish,
      _lockRewardPercent: BigNumberish,
      _startVestingBlock: BigNumberish,
      _endVestingBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addRewardPool(address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      _rewardToken: string,
      _startBlock: BigNumberish,
      _endRewardBlock: BigNumberish,
      _rewardPerBlock: BigNumberish,
      _lockRewardPercent: BigNumberish,
      _startVestingBlock: BigNumberish,
      _endVestingBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bind(
      token: string,
      balance: BigNumberish,
      denorm: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "bind(address,uint256,uint256)"(
      token: string,
      balance: BigNumberish,
      denorm: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    calcInGivenOut(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcInGivenOut(uint256,uint256,uint256,uint256,uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcOutGivenIn(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcOutGivenIn(uint256,uint256,uint256,uint256,uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    exitPool(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "exitPool(uint256,uint256[])"(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    exitswapExternAmountOut(
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      maxPoolAmountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "exitswapExternAmountOut(address,uint256,uint256)"(
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      maxPoolAmountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    exitswapPoolAmountIn(
      tokenOut: string,
      poolAmountIn: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "exitswapPoolAmountIn(address,uint256,uint256)"(
      tokenOut: string,
      poolAmountIn: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    finalize(
      _swapFee: BigNumberish,
      _initPoolSupply: BigNumberish,
      _bindTokens: string[],
      _bindDenorms: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "finalize(uint256,uint256,address[],uint256[])"(
      _swapFee: BigNumberish,
      _initPoolSupply: BigNumberish,
      _bindTokens: string[],
      _bindDenorms: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    finalizeRewardFundInfo(
      _rewardFund: string,
      _unstakingFrozenTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "finalizeRewardFundInfo(address,uint256)"(
      _rewardFund: string,
      _unstakingFrozenTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getBalance(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDenormalizedWeight(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDenormalizedWeight(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFinalTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "getFinalTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSpotPrice(
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSpotPrice(address,address)"(
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDenormalizedWeight(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalDenormalizedWeight()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBound(t: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isBound(address)"(
      t: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinPool(
      poolAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "joinPool(uint256,uint256[])"(
      poolAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    joinPoolFor(
      account: string,
      rewardAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "joinPoolFor(address,uint256,uint256[])"(
      account: string,
      rewardAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    joinswapExternAmountIn(
      tokenIn: string,
      tokenAmountIn: BigNumberish,
      minPoolAmountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "joinswapExternAmountIn(address,uint256,uint256)"(
      tokenIn: string,
      tokenAmountIn: BigNumberish,
      minPoolAmountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    joinswapPoolAmountOut(
      tokenIn: string,
      poolAmountOut: BigNumberish,
      maxAmountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "joinswapPoolAmountOut(address,uint256,uint256)"(
      tokenIn: string,
      poolAmountOut: BigNumberish,
      maxAmountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    rebind(
      token: string,
      balance: BigNumberish,
      denorm: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "rebind(address,uint256,uint256)"(
      token: string,
      balance: BigNumberish,
      denorm: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setController(
      _controller: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setController(address)"(
      _controller: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setExchangeProxy(
      _exchangeProxy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setExchangeProxy(address)"(
      _exchangeProxy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPublicSwap(
      _publicSwap: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPublicSwap(bool)"(
      _publicSwap: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSwapFee(
      _swapFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setSwapFee(uint256)"(
      _swapFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapExactAmountIn(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapExactAmountIn(address,uint256,address,uint256,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapExactAmountOut(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapExactAmountOut(address,uint256,address,uint256,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapFee(overrides?: CallOverrides): Promise<BigNumber>;

    "swapFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    "version()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addRewardPool(
      _rewardToken: string,
      _startBlock: BigNumberish,
      _endRewardBlock: BigNumberish,
      _rewardPerBlock: BigNumberish,
      _lockRewardPercent: BigNumberish,
      _startVestingBlock: BigNumberish,
      _endVestingBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addRewardPool(address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      _rewardToken: string,
      _startBlock: BigNumberish,
      _endRewardBlock: BigNumberish,
      _rewardPerBlock: BigNumberish,
      _lockRewardPercent: BigNumberish,
      _startVestingBlock: BigNumberish,
      _endVestingBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bind(
      token: string,
      balance: BigNumberish,
      denorm: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "bind(address,uint256,uint256)"(
      token: string,
      balance: BigNumberish,
      denorm: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    calcInGivenOut(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcInGivenOut(uint256,uint256,uint256,uint256,uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcOutGivenIn(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcOutGivenIn(uint256,uint256,uint256,uint256,uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exitPool(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exitPool(uint256,uint256[])"(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    exitswapExternAmountOut(
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      maxPoolAmountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exitswapExternAmountOut(address,uint256,uint256)"(
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      maxPoolAmountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    exitswapPoolAmountIn(
      tokenOut: string,
      poolAmountIn: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exitswapPoolAmountIn(address,uint256,uint256)"(
      tokenOut: string,
      poolAmountIn: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    finalize(
      _swapFee: BigNumberish,
      _initPoolSupply: BigNumberish,
      _bindTokens: string[],
      _bindDenorms: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "finalize(uint256,uint256,address[],uint256[])"(
      _swapFee: BigNumberish,
      _initPoolSupply: BigNumberish,
      _bindTokens: string[],
      _bindDenorms: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    finalizeRewardFundInfo(
      _rewardFund: string,
      _unstakingFrozenTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "finalizeRewardFundInfo(address,uint256)"(
      _rewardFund: string,
      _unstakingFrozenTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBalance(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDenormalizedWeight(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDenormalizedWeight(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFinalTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getFinalTokens()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpotPrice(
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSpotPrice(address,address)"(
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalDenormalizedWeight(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalDenormalizedWeight()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBound(
      t: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isBound(address)"(
      t: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinPool(
      poolAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "joinPool(uint256,uint256[])"(
      poolAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    joinPoolFor(
      account: string,
      rewardAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "joinPoolFor(address,uint256,uint256[])"(
      account: string,
      rewardAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    joinswapExternAmountIn(
      tokenIn: string,
      tokenAmountIn: BigNumberish,
      minPoolAmountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "joinswapExternAmountIn(address,uint256,uint256)"(
      tokenIn: string,
      tokenAmountIn: BigNumberish,
      minPoolAmountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    joinswapPoolAmountOut(
      tokenIn: string,
      poolAmountOut: BigNumberish,
      maxAmountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "joinswapPoolAmountOut(address,uint256,uint256)"(
      tokenIn: string,
      poolAmountOut: BigNumberish,
      maxAmountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebind(
      token: string,
      balance: BigNumberish,
      denorm: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "rebind(address,uint256,uint256)"(
      token: string,
      balance: BigNumberish,
      denorm: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setController(
      _controller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setController(address)"(
      _controller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setExchangeProxy(
      _exchangeProxy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setExchangeProxy(address)"(
      _exchangeProxy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPublicSwap(
      _publicSwap: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPublicSwap(bool)"(
      _publicSwap: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSwapFee(
      _swapFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSwapFee(uint256)"(
      _swapFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapExactAmountIn(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapExactAmountIn(address,uint256,address,uint256,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapExactAmountOut(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapExactAmountOut(address,uint256,address,uint256,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "swapFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "version()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
